generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Uses database connection from .env file
}

model User {
  id          String  @id @default(uuid()) 
  firstName   String  
  lastName    String  
  dob         DateTime  
  email       String   @unique  
  password    String  
  phoneNumber String  
  createdAt   DateTime @default(now())  

  propertyManager PropertyManager?
  leasingAgent    LeasingAgent?
  admin           Admin?
  applicant       Applicant?
  tenant          Tenant?
}


model PropertyManager {
  id        String @id @default(uuid()) // Primary Key
  userId    String @unique // Foreign Key linking to User (One-to-One)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRole  String // Role identifier for Property Manager
  createdAt DateTime @default(now()) // Automatically records creation timestamp
}

model LeasingAgent {
  id         String @id @default(uuid()) // Primary Key
  userId     String @unique // Foreign Key linking to User (One-to-One)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRole   String // Role identifier for Leasing Agent
  createdAt  DateTime @default(now()) // Automatically records creation timestamp
}

model Admin {
  id        String @id @default(uuid()) // Primary Key
  userId    String @unique // Foreign Key linking to User (One-to-One)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) // Automatically records creation timestamp
}

model Applicant {
  id                  String  @id @default(uuid()) // Primary Key
  userId              String  @unique // Foreign Key linking to User (One-to-One)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentalApplicationId String? // Placeholder for Rental Application FK (to be added later)
  governmentId        String? // Placeholder for Government ID FK (to be added later)
  socialSecurity      String?  
  vehicles           Int?  
  smoker            Boolean?  
  annualIncome       Float?  
  pet               Boolean?  
  signatureStatus    String?  
  addressId          String?  @unique // Foreign Key linking to Address (One-to-One)
  address            Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) // Automatically records creation timestamp
}

model Tenant {
  id        String @id @default(uuid()) // Primary Key
  userId    String @unique // Foreign Key linking to User (One-to-One)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaseId   String? // Placeholder for Lease FK (to be added later)
  createdAt DateTime @default(now()) // Automatically records creation timestamp
}

model Address {
  id        String @id @default(uuid()) // Primary Key
  number    String  // House or Apartment number
  street    String  // Street Name
  aptSuite  String? // Apartment or Suite Number (optional)
  city      String  // City Name
  state     String  // State Name
  zipcode   String  // Postal Code
  country   String  // Country Name

  applicant Applicant? // One-to-One relationship with Applicant
}







/// 12. Apartment 
model Apartment {
  id          String   @id @default(uuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitNumber  String
  maxCapacity Int
  squareFeet  Int
  image       String?
  bedrooms    Int
  baths       Int

  // Relations:
  // One-to-one with RentalApplication and Lease.
  rentalApplication RentalApplication?
  lease             Lease?
  // One-to-one with SmartLock.
  smartLock         SmartLock?
  // One-to-many: An apartment can have multiple parking passes...
  parkingPasses     ParkingPass[]
  // and multiple listings 
  listings          Listing[]
}


//add vehicle entity



/// 11. Property 
model Property {
  id                  String            @id @default(uuid())
  managementCompanyId String
  managementCompany   ManagementCompany @relation(fields: [managementCompanyId], references: [id], onDelete: Cascade)
  addressId           String
  address             Address           @relation(fields: [addressId], references: [id], onDelete: Cascade)
  propertyName        String
  websiteUrl          String?

  // Relations:
  apartments          Apartment[]
  listings            Listing[]
  leasingAgents       LeasingAgent[]
  propertyToAmenities PropertyToAmenity[]
  packageLockers      PackageLocker[]
}