generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  APPLICANT
  TENANT
  PROPERTY_MANAGER
  LEASING_AGENT
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

enum RentalApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum NotificationType {
  COMPLAINT
  REPAIR
  NOISE_COMPLAINT
  GENERAL
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum AmenityAvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
}

enum ApartmentAvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
}

enum PackageLockerStatus {
  AVAILABLE
  UNAVAILABLE
}

enum Action {
  READY_FOR_PICKUP
  PICKED_UP
}

model Address {
  id                String             @id @default(uuid())
  number            Int
  street            String
  suiteNumber       Int?
  city              String
  state             String
  zipCode           String
  country           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ManagementCompany ManagementCompany?
  Property          Property?
  Applicant         Applicant[]
  LeasingAgent      LeasingAgent[]
}

model User {
  id              String           @id @default(uuid())
  firstName       String           @db.VarChar(40)
  lastName        String           @db.VarChar(40)
  email           String           @unique
  password        String
  dateOfBirth     DateTime
  phoneNumber     String           @db.VarChar(40)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Admin           Admin?
  PropertyManager PropertyManager?
  LeasingAgent    LeasingAgent?
  Applicant       Applicant?
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userRole  Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyManager {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userRole  Role      @default(PROPERTY_MANAGER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Property  Property?
}

model Tenant {
  id                  String                @id @default(uuid())
  applicantId         String                @unique
  applicant           Applicant             @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  userRole            Role                  @default(TENANT)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  notifications       Notification[]
  guests              Guest[]
  PackageLockerAccess PackageLockerAccess[]
  Lease               Lease                 @relation(fields: [leaseId], references: [id])
  leaseId             String
  Property            Property?             @relation(fields: [propertyId], references: [id])
  propertyId          String?
  DigitalAccessKey    DigitalAccessKey?
}

model LeasingAgent {
  id         String    @id @default(uuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRole   Role      @default(LEASING_AGENT)
  address    Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
}

model Guest {
  id          String        @id @default(uuid())
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  parkingPass ParkingPass[]
}

model ManagementCompany {
  id          String     @id @default(uuid())
  companyName String
  address     Address    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId   String     @unique
  websiteURL  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  properties  Property[]
}

model Property {
  id                  String            @id @default(uuid())
  managementCompany   ManagementCompany @relation(fields: [managementCompanyId], references: [id], onDelete: Cascade)
  managementCompanyId String            @unique
  propertyManagerId   String            @unique
  propertyManager     PropertyManager   @relation(fields: [propertyManagerId], references: [id], onDelete: Cascade)
  address             Address           @relation(fields: [addressId], references: [id])
  addressId           String            @unique
  propertyName        String
  websiteURL          String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  amenities           Amenity[]
  apartments          Apartment[]
  leasingAgents       LeasingAgent[]
  tenants             Tenant[]
  packageLockers      PackageLocker[]
}

model Amenity {
  id                 String                    @id @default(uuid())
  amenityName        String
  description        String?
  location           String?
  availabilityStatus AmenityAvailabilityStatus @default(AVAILABLE)
  requiresAccessCode Boolean                   @default(false)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  Property           Property?                 @relation(fields: [propertyId], references: [id])
  propertyId         String?
}

model Apartment {
  id                          String                      @id @default(uuid())
  property                    Property                    @relation(fields: [propertyId], references: [id])
  propertyId                  String
  unitNumber                  Int
  maxCapacity                 Int
  squareFeet                  Int
  image                       String
  bedrooms                    Int
  bathrooms                   Int
  apartmentAvailabilityStatus ApartmentAvailabilityStatus @default(AVAILABLE)
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  listings                    Listing[]
  smartLock                   SmartLock[]
}

model Listing {
  id                String                      @id @default(uuid())
  apartmentId       String
  apartment         Apartment                   @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  petFriendly       Boolean
  furnished         Boolean
  leaseLength       Int
  monthlyRent       Float
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  RentalApplication RentalApplication?
  ContactUs         ContactUs?
  status            ApartmentAvailabilityStatus @default(AVAILABLE)
}

model RentalApplication {
  id          String                  @id @default(uuid())
  listing     Listing                 @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId   String                  @unique
  status      RentalApplicationStatus @default(PENDING)
  startDate   DateTime
  leaseLength Int
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  applicants  Applicant[]
  Lease       Lease?
}

model Applicant {
  id                  String             @id @default(uuid())
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRole            Role               @default(APPLICANT)
  addressId           String
  address             Address            @relation(fields: [addressId], references: [id], onDelete: Cascade)
  governmentId        String // government_id column from SQL
  socialSecurity      String // social_security column
  vehicle             Vehicle?           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId           String?
  smoker              Boolean
  annualIncome        Float // annual_income
  pet                 Boolean
  signatureStatus     String // signature_status
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  RentalApplication   RentalApplication? @relation(fields: [rentalApplicationId], references: [id])
  rentalApplicationId String?
  Tenant              Tenant?
}

model Vehicle {
  id           String        @id @default(uuid())
  model        String
  maker        String
  color        String
  licensePlate String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Applicant    Applicant[]
  ParkingPass  ParkingPass[]
}

model Lease {
  id                  String            @id @default(uuid())
  rentalApplication   RentalApplication @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
  rentalApplicationId String            @unique
  leaseStart          DateTime
  leaseEnd            DateTime
  monthlyRent         Decimal
  securityDeposit     Decimal
  leaseStatus         LeaseStatus
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  tenants             Tenant[]
}

model Notification {
  id               String               @id @default(uuid()) @map("notification_id")
  tenantId         String
  tenant           Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  notificationType NotificationType     @default(NOISE_COMPLAINT)
  title            String
  message          String?
  status           NotificationStatus   @default(UNREAD)
  priority         NotificationPriority @default(LOW)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model ParkingPass {
  id                String   @id @default(uuid())
  guestId           String   @unique
  guest             Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade)
  vehicleId         String
  vehicle           Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  parkingPassNumber String   @unique
  createdAt         DateTime @default(now())
  expirationDate    DateTime
}

model SmartLock {
  id               String             @id @default(uuid())
  apartmentId      String             @unique
  apartment        Apartment          @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  digitalAccessKey DigitalAccessKey[]
}

model DigitalAccessKey {
  id             String     @id @default(uuid())
  tenantId       String     @unique
  tenant         Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code           String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  expirationDate DateTime
  smartLockId    String?
  SmartLock      SmartLock? @relation(fields: [smartLockId], references: [id])
}

model PackageLocker {
  id                  String                @id @default(uuid())
  propertyId          String
  property            Property              @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  lockerNumber        String
  location            String?
  packageLockerStatus PackageLockerStatus
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PackageLockerAccess PackageLockerAccess[]
}

model PackageLockerAccess {
  id              String        @id @default(uuid())
  packageLockerId String
  packageLocker   PackageLocker @relation(fields: [packageLockerId], references: [id], onDelete: Cascade)
  tenantId        String        @unique
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  accessCode      String
  action          Action        @default(READY_FOR_PICKUP)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ContactUs {
  id          String   @id @default(uuid())
  listingId   String   @unique
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  name        String
  email       String?
  phoneNumber String
  title       String?
  message     String?
  createdAt   DateTime @default(now())
}
